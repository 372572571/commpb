// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package commpb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD4ece350DecodeGithubCom372572571Commpb(in *jlexer.Lexer, out *usersClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4ece350EncodeGithubCom372572571Commpb(out *jwriter.Writer, in usersClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4ece350EncodeGithubCom372572571Commpb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4ece350EncodeGithubCom372572571Commpb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4ece350DecodeGithubCom372572571Commpb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4ece350DecodeGithubCom372572571Commpb(l, v)
}
func easyjsonD4ece350DecodeGithubCom372572571Commpb1(in *jlexer.Lexer, out *UnimplementedUsersServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4ece350EncodeGithubCom372572571Commpb1(out *jwriter.Writer, in UnimplementedUsersServer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnimplementedUsersServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4ece350EncodeGithubCom372572571Commpb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnimplementedUsersServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4ece350EncodeGithubCom372572571Commpb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnimplementedUsersServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4ece350DecodeGithubCom372572571Commpb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnimplementedUsersServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4ece350DecodeGithubCom372572571Commpb1(l, v)
}
func easyjsonD4ece350DecodeGithubCom372572571Commpb2(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int32(in.Int32())
		case "message":
			out.Message = string(in.String())
		case "details":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				in.Delim('[')
				if out.Details == nil {
					if !in.IsDelim(']') {
						out.Details = make([]string, 0, 4)
					} else {
						out.Details = []string{}
					}
				} else {
					out.Details = (out.Details)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Details = append(out.Details, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4ece350EncodeGithubCom372572571Commpb2(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Code))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if len(in.Details) != 0 {
		const prefix string = ",\"details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Details {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4ece350EncodeGithubCom372572571Commpb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4ece350EncodeGithubCom372572571Commpb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4ece350DecodeGithubCom372572571Commpb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4ece350DecodeGithubCom372572571Commpb2(l, v)
}
